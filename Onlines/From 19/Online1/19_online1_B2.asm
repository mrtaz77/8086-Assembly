.MODEL SMALL ;SCOPE OF CODE

.STACK 100H ;ALLOCATE MEMORY IN HEXADECIMAL

.DATA ;VARIABLE DECLARATION
CR EQU 0DH
LF EQU 0AH

NL DB CR,LF,'$'
ERROR DB CR,LF,'Invalid input$'
PE DB 'PE$'
NE DB 'NE$'


; EQU MEANS EQUAL
; THESE CONSTANTS ARE USED IN ALL CODES
; USED FOR NEW LINE


.CODE

MAIN PROC ; LIKE MAIN

;DATA SEGMENT INIT

MOV AX, @DATA;BRINGS DATA TO AX FOR INIT
MOV DS, AX
;THE ABOVE PART IS SAME FOR MOST CODES

MOV CX,2

INP: 

MOV BX,0
PUSH BX
     
COUNT:

MOV AH,1
INT 21H

CMP AL,CR
JE STR

CNT:
 

INC BX

AND AX,0FFH
SUB AL,60H

MUL BL

POP DX
ADD AX,DX

PUSH AX

CMP BX,06H
JB COUNT

STR:
LEA DX,NL
MOV AH,9
INT 21H

LOOP INP

POP AX
POP DX

CMP AX,DX
JNE NEL
     

PEL:
LEA DX,PE

JMP EXIT

NEL:

LEA DX,NE

EXIT:

MOV AH,9
INT 21H




;DOES EXIT
MOV AH,4CH
INT 21H ;INTERRUPT FUNCTION


MAIN ENDP

; prints the number in decimal stored in AX register
PROC PRINT_NUM NEAR
    MOV BX,0AH
    PUSH 404H ; end of number
    ;DISPLAY NUM
    NUM_IN_STACK:
        CMP BX,AX
        JA EXIT_NUM_STACK
        MOV DX,0
        DIV BX
        PUSH DX
        JMP NUM_IN_STACK
    EXIT_NUM_STACK:
        CMP AX,0
        JE NO_PUSH
        PUSH AX
    NO_PUSH:
        MOV AH,2
    DISPLAY:
        POP DX
        CMP DX,404H
        JE EXIT_FUNC
        ADD DX,30H
        INT 21H
        JMP DISPLAY
    EXIT_FUNC:
        RET

END MAIN;END OF CODE